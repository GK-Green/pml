# PML course project
# Including necessary libraries
library(caret)
# Reading training data
OriData <- read.csv("pml-training.csv", header = TRUE, row.names = 1)
OriTest <- read.csv("pml-testing.csv", header = TRUE, row.names = 1)
numCase <- nrow(OriData)
# Cleaning data
# Handle missing values
# The percentage of the missing values of each column is evaluated
# The columns has more than 95% of the missing values are removed
# The user_name feature is removed because the nature of the project
# The action should not depend on person, and it's varified by
# ploting user_name vs the classe
nacol <- sapply(OriData, function(x) sum(is.na(x)|x==""))
data  <- OriData[,!(nacol/numCase > 0.95)]
data$cvtd_timestamp <- as.numeric(strptime(as.character(data$cvtd_timestamp),
format = "%d/%m/%Y %H:%M"))
data  <- data[,-1]
# Detection of non-variate/zero covariates/features
nsv    <- nearZeroVar(as.matrix(data), saveMetrics = TRUE)
data   <- data[,nsv$nzv == FALSE]
rm(OriData)
# Split data to training (0.6), validation (0.2), and testing (0.2) set
set.seed(2)
Intrain    <- createDataPartition(data[,57], p = 0.8, list = FALSE)
training   <- data[Intrain,]
testing    <- data[-Intrain,]
InValid    <- createDataPartition(training[,57], p = 0.25, list = FALSE)
validation <- training[InValid,]
training   <- training[-InValid,]
# Transform data
prep1            <- preProcess(training[,-57], method = c("center","scale"))
training[,-57]   <- predict(prep1,training[,-57])
validation[,-57] <- predict(prep1,validation[,-57])
testing[,-57]    <- predict(prep1, testing[,-57])
# Feature scanning to find stewed data
# abnormal <- numeric(0)
# for (i in 1:ncol(training_f)){
#   hist(as.numeric(training_f[,i]), main = colnames(training_f)[i])
#   x <- readline("1. stop 2. mark: ")
#   if (x ==1 ) break
#   else if (x==2) abnormal <- cbind(abnormal,i)
# }
# Remove outliers
summary(training_f[,42])
summary(training_f[,35])
summary(training_f[,9])
a <- which(training_f[,42] < -11)
a <- c(a, which(training_f[,35] < -100))
a <- c(a, which(training_f[,9]  > 8))
training <- training[-a,]
# Detection of correlation between features
# If there is correlation between features (pca_condition is not 0)
# Perform PCA
n              <- ncol(training[,-57])
comatrix       <- abs(cor(training[,-57]))
diag(comatrix) <- 0
pca_condition  <- length(which(comatrix > 0.8, arr.ind = F)) != 0
if (pca_condition) {
prep2 <- preProcess(training[,-57], method = "pca", thres = 0.95)
training   <- cbind(predict(prep2,training[,-57]),classe = training[,57])
validation <- cbind(predict(prep2,validation[,-57]),classe = validation[,57])
testing    <- cbind(predict(prep2,testing[,-57]),classe = testing[,57])
}
# PML course project
# Including necessary libraries
library(caret)
# Reading training data
OriData <- read.csv("pml-training.csv", header = TRUE, row.names = 1)
OriTest <- read.csv("pml-testing.csv", header = TRUE, row.names = 1)
numCase <- nrow(OriData)
# Cleaning data
# Handle missing values
# The percentage of the missing values of each column is evaluated
# The columns has more than 95% of the missing values are removed
# The user_name feature is removed because the nature of the project
# The action should not depend on person, and it's varified by
# ploting user_name vs the classe
nacol <- sapply(OriData, function(x) sum(is.na(x)|x==""))
data  <- OriData[,!(nacol/numCase > 0.95)]
data$cvtd_timestamp <- as.numeric(strptime(as.character(data$cvtd_timestamp),
format = "%d/%m/%Y %H:%M"))
data  <- data[,-1]
# Detection of non-variate/zero covariates/features
nsv    <- nearZeroVar(as.matrix(data), saveMetrics = TRUE)
data   <- data[,nsv$nzv == FALSE]
rm(OriData)
# Split data to training (0.6), validation (0.2), and testing (0.2) set
set.seed(132563)
Intrain    <- createDataPartition(data[,57], p = 0.8, list = FALSE)
training   <- data[Intrain,]
testing    <- data[-Intrain,]
InValid    <- createDataPartition(training[,57], p = 0.25, list = FALSE)
validation <- training[InValid,]
training   <- training[-InValid,]
coln       <- colnames(data)
rm(data, Intrain, InValid)
# Transform data
prep1            <- preProcess(training[,-57], method = c("center","scale"))
training[,-57]   <- predict(prep1, training[,-57])
validation[,-57] <- predict(prep1, validation[,-57])
testing[,-57]    <- predict(prep1, testing[,-57])
# Feature scanning to find stewed data
# abnormal <- numeric(0)
# for (i in 1:ncol(training)){
#   hist(as.numeric(training[,i]), main = colnames(training)[i])
#   x <- readline("1. stop 2. mark: ")
#   if (x ==1 ) break
#   else if (x==2) abnormal <- cbind(abnormal,i)
# }
# Remove outliers
summary(training[,42])
summary(training[,35])
summary(training[,9])
a <- which(training[,42] < -11)
a <- c(a, which(training[,35] < -100))
a <- c(a, which(training[,9]  > 8))
training <- training[-a,]
rm(a)
# Detection of correlation between features
# If there is correlation between features (pca_condition is not 0)
# Perform PCA
comatrix       <- abs(cor(training[,-57]))
diag(comatrix) <- 0
pca_condition  <- length(which(comatrix > 0.8, arr.ind = F)) != 0
if (pca_condition) {
prep2 <- preProcess(training[,-57], method = "pca", thres = 0.95)
training   <- cbind(predict(prep2,training[,-57]),classe = training[,57])
validation <- cbind(predict(prep2,validation[,-57]),classe = validation[,57])
testing    <- cbind(predict(prep2,testing[,-57]),classe = testing[,57])
}
rm(comatrix, pca_condition)
# All preprocess together
prepall <- function(x){
x <- x[,coln[-57]]
x$cvtd_timestamp <- as.numeric(strptime(as.character(x$cvtd_timestamp),
format = "%d/%m/%Y %H:%M"))
predict(prep2,predict(prep1, x))
}
library(caret)
setwd("c:/users/gzy/pml")
library(caret)
# Reading training data
OriData <- read.csv("pml-training.csv", header = TRUE, row.names = 1)
OriTest <- read.csv("pml-testing.csv", header = TRUE, row.names = 1)
numCase <- nrow(OriData)
# Cleaning data
# Handle missing values
# The percentage of the missing values of each column is evaluated
# The columns has more than 95% of the missing values are removed
# The user_name feature is removed because the nature of the project
# The action should not depend on person, and it's varified by
# ploting user_name vs the classe
nacol <- sapply(OriData, function(x) sum(is.na(x)|x==""))
data  <- OriData[,!(nacol/numCase > 0.95)]
data$cvtd_timestamp <- as.numeric(strptime(as.character(data$cvtd_timestamp),
format = "%d/%m/%Y %H:%M"))
data  <- data[,-1]
# Detection of non-variate/zero covariates/features
nsv    <- nearZeroVar(as.matrix(data), saveMetrics = TRUE)
data   <- data[,nsv$nzv == FALSE]
rm(OriData)
# Split data to training (0.6), validation (0.2), and testing (0.2) set
set.seed(132563)
Intrain    <- createDataPartition(data[,57], p = 0.8, list = FALSE)
training   <- data[Intrain,]
testing    <- data[-Intrain,]
InValid    <- createDataPartition(training[,57], p = 0.25, list = FALSE)
validation <- training[InValid,]
training   <- training[-InValid,]
coln       <- colnames(data)
rm(data, Intrain, InValid)
# Transform data
prep1            <- preProcess(training[,-57], method = c("center","scale"))
training[,-57]   <- predict(prep1, training[,-57])
validation[,-57] <- predict(prep1, validation[,-57])
testing[,-57]    <- predict(prep1, testing[,-57])
# Feature scanning to find stewed data
# abnormal <- numeric(0)
# for (i in 1:ncol(training)){
#   hist(as.numeric(training[,i]), main = colnames(training)[i])
#   x <- readline("1. stop 2. mark: ")
#   if (x ==1 ) break
#   else if (x==2) abnormal <- cbind(abnormal,i)
# }
# Remove outliers
summary(training[,42])
summary(training[,35])
summary(training[,9])
a <- which(training[,42] < -11)
a <- c(a, which(training[,35] < -100))
a <- c(a, which(training[,9]  > 8))
training <- training[-a,]
rm(a)
# Detection of correlation between features
# If there is correlation between features (pca_condition is not 0)
# Perform PCA
comatrix       <- abs(cor(training[,-57]))
diag(comatrix) <- 0
pca_condition  <- length(which(comatrix > 0.8, arr.ind = F)) != 0
if (pca_condition) {
prep2 <- preProcess(training[,-57], method = "pca", thres = 0.95)
training   <- cbind(predict(prep2,training[,-57]),classe = training[,57])
validation <- cbind(predict(prep2,validation[,-57]),classe = validation[,57])
testing    <- cbind(predict(prep2,testing[,-57]),classe = testing[,57])
}
rm(comatrix, pca_condition)
# All preprocess together
prepall <- function(x){
x <- x[,coln[-57]]
x$cvtd_timestamp <- as.numeric(strptime(as.character(x$cvtd_timestamp),
format = "%d/%m/%Y %H:%M"))
predict(prep2,predict(prep1, x))
}
M-rf <- train(classe ~ ., data = training, method = "rf")
M_rf <- M-rf
M-rf
M_rf
rf
M
M-rf
M_rf <- train(classe ~ ., data = training, method = "rf")
save(M_rf, file = "M_rf.RData")
M_rf
M_svmR <- train(classe ~., data = training, method = "svmRadial")
M_svnR
M_svmR
save(M_svmR, file = "M_svmR.RData")
M_svmR$time
M_gbm$time
M_rf$time
confusionMatrix(predict(M_svmR,validation[,-29]),validation[,29])
confusionMatrix(predict(M_rf,validation[,-29]),validation[,29])
load("M_gbm.RData")
confusionMatrix(predict(M_gbm,validation[,-29]),validation[,29])
confusionMatrix(predict(M_gbm$finalModel,validation[,-29]),validation[,29])
confusionMatrix(predict(M_rf$finalModel,validation[,-29]),validation[,29])
confusionMatrix(predict(M_svmR$finalModel,validation[,-29]),validation[,29])
pred_rf <- predict(M_rf, training[,-20])
pred_rf <- predict(M_rf, training[,-29])
pred_gbm <- predict(M_gbm, training[,-29])
pred_svmR <- predict(M_svmR, training[,-29])
M_Stack   <- train(x = cbind(pred_rf,pred_gbm,pred_svmR), y = training[,29], method = "rf")
confusionMatrix(predict(M_Stack$finalModel,validation[,-29]),validation[,29])
pred_rf <- predict(M_rf, validation[,-29])
pred_gbm <- predict(M_gbm, validation[,-29])
pred_svmR <- predict(M_svmR, validation[,-29])
confusionMatrix(predict(M_Stack$finalModel,cbind(pred_rf,pred_gbm,pred_svmR)),validation[,29])
prepall <- function(x){
x <- x[,coln[-57]]
x$cvtd_timestamp <- as.numeric(strptime(as.character(x$cvtd_timestamp),
format = "%d/%m/%Y %H:%M"))
predict(prep2,predict(prep1, x))
}
testx <- prepall(OriTest)
predict(M_rf$finalModel, testx)
predict(M_svmR$finalModel, testx)
predict(M_gbm, testx)
result <- "BABAABDBAABCBAEEABBB"
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(result)
pml_write_files(predict(M_rf$finalModel, testx))
result <- "B  A  B  A  A  B  D  B  A  A  B  C  B  A  E  E  A  B  B  B"
result
save(result,file = "result_6th_inc.RData")
all <- rbind(training, validation, testing)
M_rf_all <- train(classe~., data = all, method = "rf")
M_rf_all
predict(M_rf_all, testx)
result
M_svmL <- train(classe~., data = training, method - "svmLinear")
M_svmL <- train(classe~., data = training, method = "svmLinear")
M_svmL
save(M_svmL, file = "M_svmL.RData")
